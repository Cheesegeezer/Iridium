<Mcml xmlns="http://schemas.microsoft.com/2008/mcml"
      xmlns:sys="assembly://mscorlib/System"
      xmlns:me="Me">

	<UI Name="GenreMove">

		<Locals>
			<!-- A ListDataSet that handles content / order change events -->
			<ArrayListDataSet Name="MyList">
				<Source>
					<sys:String String="Action"/>
					<sys:String String="Comedy"/>
					<sys:String String="Horror"/>
					<sys:String String="War"/>
					<sys:String String="Family"/>
					<sys:String String="Drama"/>
					<sys:String String="Crime"/>
					<sys:String String="Sci-Fi"/>
					<sys:String String="Animation"/>
					<sys:String String="Thriller"/>
					
				</Source>
			</ArrayListDataSet>

			<!-- A timer that fires every now and then to kick off a move event. -->
			<Timer Name="Timer"
				   Interval="100"
				   AutoRepeat="true"
				   Enabled="true"/>

			<!-- Values that hold the old and new index to used with the Move() method -->
			<!-- to affect the position of individual items in the ArrayListDataSet. -->
			<sys:Int32 Name="OldIndex"
					   Int32="0"/>
			<sys:Int32 Name="NewIndex"
					   Int32="0"/>

			<!-- A random used to generate values for OldIndex and NewIndex. -->
			<sys:Random Name="RandomGenerator"/>
		</Locals>

		<Rules>
			<!-- A rule that evaluates for each tick of the timer. -->
			<Changed Source="[Timer.Tick]">
				<Actions>
					<!-- Generate a random start and end index -->
					<Invoke Target="[RandomGenerator.Next]"
							maxValue="[MyList.Count]"
							ResultTarget="[OldIndex]"
							ExclusiveApply="false"/>
					<Invoke Target="[RandomGenerator.Next]"
							maxValue="[MyList.Count]"
							ResultTarget="[NewIndex]"
							ExclusiveApply="false"/>

					<!-- Invoke the Move() method which will modify the order -->
					<!-- of the ArrayListDataSet -->
					<Invoke Target="[MyList.Move]"
							oldIndex="[OldIndex]"
							newIndex="[NewIndex]"/>

					<!-- View the changes made to the indexes using a tool like DebugView to view. -->
					<!-- See http://www.microsoft.com/technet/sysinternals/utilities/debugview.mspx -->
					<DebugTrace Message="Moving from from {0} to {1}">
						<Params>
							<ObjectPath ObjectPath="[OldIndex]"/>
							<ObjectPath ObjectPath="[NewIndex]"/>
						</Params>
					</DebugTrace>
				</Actions>
			</Changed>
		</Rules>

		<Content>
			<Panel Layout="Center">
				<Children>
					<Repeater Source="[MyList]"
							  Layout="HorizontalFlow">
						<Content>
							<!-- The UI used for our item, passing in the Index and value from -->
							<!-- the ArrayListDataSet. -->
							<me:Item Index="[RepeatedItemIndex]"
									 Value="[RepeatedItem!sys:String]">
								<Animations>
									<!-- Each time the index changes for the ArrayListDataItem -->
									<!-- run this animation. Depending on the timer interval this can have -->
									<!-- a cumulative effect as the animation is applied across the range -->
									<!-- determined by the random number generator for OldIndex and NewIndex. -->
									<!-- A timer interval of 100 or less demonstrates this effect well. -->
									<Animation Type="Move">
										<Keyframes>
											<PositionKeyframe Time="0.00"
															  RelativeTo="Current"
															  Interpolation="SCurve"/>
											<PositionKeyframe Time="0.15"
															  RelativeTo="Current"
															  Value="0,0,0"/>
											<PositionKeyframe Time="0.35"
															  RelativeTo="Final"
															  Value="0,0,0"/>
											<PositionKeyframe Time="0.50"
															  RelativeTo="Final"
															  Interpolation="SCurve"/>
										</Keyframes>
									</Animation>
								</Animations>
							</me:Item>
						</Content>
					</Repeater>
				</Children>
			</Panel>
		</Content>
	</UI>

	<UI Name="Item">

		<Properties>
			<!-- These are set as each item is created in the repeater. -->
			<Index Name="Index"
				   Index="$Required"/>
			<sys:String Name="Value"
						String="$Required"/>
		</Properties>

		<Rules>
			<!-- Bind the index. Note when the index changes we see the change reflected -->
			<!-- in the visuals without any explicit code setting the value. -->
			<Binding Source="[Index.Value.ToString]"
					 Target="[IndexLabel.Content]"/>
		</Rules>

		<Content>
			<Panel Layout="VerticalFlow">
				<Children>
					<!-- The text from the ArrayListDataSet which is repeated. -->
					<Text Content="[Value]"
						  Color="White"
						  Font="Futurist Fixed-width, 10"/>
					<!-- The index of the item in the ArrayListDataSet. -->
					<Text Name="IndexLabel"
						  Color="Gray"
						  Font="Courier New, 6">
						<Animations>
							<!-- Each time the index changes animate the number beneath the text. -->
							<!-- Like the other animation this can have a cumulative effect -->
							<!-- as the timer interval is lowered. -->
							<Animation Type="ContentChangeHide">
								<Keyframes>
									<PositionKeyframe Time="0.00"
													  RelativeTo="Current"
													  Interpolation="Log"/>
									<PositionKeyframe Time="0.50"
													  RelativeTo="Current"
													  Value="0,60,0"/>
									<AlphaKeyframe Time="0.00"
												   RelativeTo="Current"
												   Interpolation="Log"/>
									<AlphaKeyframe Time="0.50"
												   RelativeTo="Current"
												   Value="0"/>
								</Keyframes>
							</Animation>
						</Animations>
					</Text>
				</Children>
			</Panel>
		</Content>

	</UI>

</Mcml>