<Mcml xmlns="http://schemas.microsoft.com/2008/mcml"
      xmlns:cor="assembly://MSCorLib/System"
		  xmlns:col="assembly://MSCorLib/System.Collections"
      xmlns:a="assembly://MediaBrowser/MediaBrowser"
      xmlns:lib="assembly://MediaBrowser/MediaBrowser.Library"

      xmlns:app="assembly://ROC/ROC"
			xmlns:cfi="resx://ROC/ROC.Resources/LayoutCoverflowItem"
      xmlns:anim="resx://ROC/ROC.Resources/Animations"
      xmlns:il="resx://ROC/ROC.Resources/Images"
      xmlns:s="resx://ROC/ROC.Resources/StylesMerged"
      xmlns:f="file://Fonts_DoNotEdit.mcml"
			      xmlns:me="Me">
			

	<UI Name="INTERNAL_LayoutBaseScroller">
		<Properties>
			<a:Application Name="Application" Application="$Required" />
			<lib:FolderModel Name="Folder" FolderModel="$Required" />
			<col:IList Name="SourceList" IList="null" />
			<cor:Boolean Name="SourceListIsChildren" Boolean="true" />
			<MajorMinor Name="Spacing" MajorMinor="10,0" />
			<MajorMinor Name="RepeatGap" MajorMinor="40,0" />
			<Inset Name="RepeaterMargins" Inset="0,0,0,0" />
			<IntRangedValue Name="NavCount" Value="0" />


			<app:AppUtil Name="AppUtil" AppUtil="$Required" />

			<lib:SizeRef Name="ImageSize" Value="0,0" />
			<lib:SizeRef Name="MaximumImageSize" Value="0,0" />
			<lib:SizeRef Name="MinimumImageSize" Value="0,0" />
			<cor:Boolean Name="ImageSizeAnyHeight" Boolean="false" />
			<cor:Int32 Name="NormalKeyRepeat" Int32="-1" />
			<cor:Int32 Name="FastKeyRepeat" Int32="-1" />
			<cor:Int32 Name="SpeedUpDelay" Int32="-1" />
			<!--<cor:Int32 Name="AnimDelay" Int32="1000" />-->
			<IntRangedValue Name="AnimDelay" Value="300" />
			<BooleanChoice Name="AnimDelayShowFocus" Value="true" />
			<cor:Int32 Name="SavedAnimDelay" Int32="0" />

			<Animation Name="NormalScrollingAnimation" Animation="animation://anim:ScrollerGlideMedium" />
			<Animation Name="FastScrollingAnimation" Animation="animation://anim:ScrollerGlideFast" />
			
			<cor:Boolean Name="HasFocus" Boolean="false" />
			<Command Name="FocusGained"/>
			<cor:Int32 Name="FocusTimerInterval" Int32="100" />
			<cor:Boolean Name="GoToFirstUnwatchedOnLoad" Boolean="true" />

			<Command Name="HomeKeyCommand" />
			<Command Name="EndKeyCommand" />
			
			<cor:Int32 Name="NavigateIntoIndex" Int32="-1" />
		</Properties>

		<Locals>

			<ClickHandler Name="Clicker" />
			
			<PropertySet Description="desc" Name="ScrollerProperties">
				<!--<Entries>-->
			<!--		<cor:Int32 Name="SelectRepeaterIndexForOffset" Int32="-1" />
					<cor:Int32 Name="VisibleItemIndexRangeFrom" Int32="0" />
					<cor:Int32 Name="VisibleItemIndexRangeTo" Int32="0" />
					
					<IntRangedValue Name="BotheringRange" MinValue="-2" MaxValue="2"/>
					<MathTransformer Name="BotheringSizeLeftTransformer" AddInt="5" />
					<MathTransformer Name="BotheringSizeRightTransformer" SubtractInt="5" />-->
				<!--</Entries>-->
			</PropertySet>
			
			
			<IntRangedValue Name="SelectRepeaterIndex" Value="-1" />
			<IntRangedValue Name="SelectSourceIndex" Value="-1" />
			
			<BooleanChoice Name="SelectedItemInFocus" Value="false" />
			<IntRangedValue Name="VisibleIndexRangeForSelectRepeaterIndex" Value="-1"/>
			<IntRangedValue Name="VisibleItemIndexRangeFrom" Value="-1" />
			<IntRangedValue Name="VisibleItemIndexRangeTo" Value="-1" />

			<ShortcutHandler Name="JumpForward" Shortcut="SkipForward" HandlerStage="Bubbled" Handle="true" />
			<ShortcutHandler Name="JumpBack" Shortcut="SkipBack" HandlerStage="Bubbled" Handle="true" />

			<KeyHandler Name="HomeKey" Key="Home" Modifiers="None" Command="[HomeKeyCommand]" HandlerStage="Bubbled" Handle="true" />
			<KeyHandler Name="EndKey" Key="End" Modifiers="None" Command="[EndKeyCommand]" HandlerStage="Bubbled" Handle="true" />
			
			<cor:Boolean Name="HomeAndEndEnabled" Boolean="false" />
			<ScrollingHandler Name="ScrollingHandler" HandleDirectionalKeys="true" HandleHomeEndKeys="false" HandleMouseWheel="true"
			                  HandlePageCommands="true" HandlePageKeys="true" HandlerStage="Bubbled" 
												/>
			<ScrollingData Name="ScrollingData" LockedAlignment="0.5" LockedPosition="0.5"  />
			<ScrollingData Name="ScrollingDataMouseActive" LockedAlignment="-1" LockedPosition="-1" BeginPadding="50" EndPadding="50" />
			<ScrollingData Name="SavedScrollingData" />
			<FlowLayout Name="MyLayout" Orientation="Horizontal" ItemAlignment="Far" Spacing="[Spacing]"
									AllowWrap="true" Repeat="WhenTooBig" RepeatGap="[RepeatGap]" />

			<Timer Name="ScrollAnimTimer" AutoRepeat="false" Enabled="false" Interval="150" />
			<Timer Name="FocusTimer" Interval="[FocusTimerInterval]" Enabled="true" AutoRepeat="false" />

			<cor:Boolean Name="ScrollerInFastRepeatMode" Boolean="false" />

			<cor:Int32 Name="Startup" />

			<FormLayoutInput Name="ScrollerLayoutInput" Vertical="Far" Horizontal="Fill" />
			<cor:Int32 Name="FinalItemIndex" Int32="100" />

		</Locals>

		<Rules>

			
			<!--<Binding Target="[ScrollerProperties.#BotheringSizeLeftTransformer!MathTransformer.AddInt]" Source="[ScrollerProperties.#BotheringRange!IntRangedValue.MinValue]" >
				<Transformer>
					<MathTransformer MultiplyInt="-1"/>
				</Transformer>
			</Binding>
			<Binding Target="[ScrollerProperties.#BotheringSizeRightTransformer!MathTransformer.SubtractInt]" Source="[ScrollerProperties.#BotheringRange!IntRangedValue.MaxValue]" />-->


			<Condition Source="[AppUtil.MBMajorVersionNumber]" ConditionOp="LessThan" SourceValue="3.0">
				<Actions>
					<Set  Target="[Repeater.DiscardOffscreenVisuals]" Value="true" />

					<!--<DebugTrace Message="setting repeater to NOT discardoffscreenvisuals cos this is not MBC" />-->
				</Actions>
			</Condition>

			<Condition Source="[AppUtil.MBMajorVersionNumber]" ConditionOp="GreaterThanOrEquals" SourceValue="3.0">
				<Actions>
					<Set  Target="[Repeater.DiscardOffscreenVisuals]" Value="false" />

					<!--<DebugTrace Message="setting repeater to discardoffscreenvisuals cos this is MBC" />-->
				</Actions>
			</Condition>
			<Binding Target="[FocusTimer.Interval]" Source="[FocusTimerInterval]" />

			<Default Target="[SelectSourceIndex.Value]" Value="[SelectRepeaterIndex.Value]" />
			<Default Target="[Repeater.DefaultFocusIndex]" Value="[SelectRepeaterIndex.Value]" />

			<Changed Source="[Input.DeepKeyFocus]" InitialEvaluate="true"  ConditionLogicalOp="And" >
				<Conditions>
					<Equality Source="[Input.DeepKeyFocus]" ConditionOp="Equals" Value="true" />
					<Equality Source="[FocusGained]" ConditionOp="NotEquals" Value="null" />
					<Equality Source="[FocusGained.Available]" ConditionOp="Equals" Value="true" />
				</Conditions>
				<Actions>
					<!--<DebugTrace Message="{0} scroller has gained focus and can fire event">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
						</Params>
					</DebugTrace>-->
					<Invoke Target="[FocusGained.Invoke]" />
				</Actions>
			</Changed>
			<!--<Changed Source="[AnimDelayShowFocus.Value]" ConditionLogicalOp="And" >
				<Actions>
					<DebugTrace Message="{0} scroller AnimDelayShowFocus changed to {1}">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
							<ObjectPath ObjectPath="[AnimDelayShowFocus.Value]"/>
						</Params>
					</DebugTrace>
				</Actions>
			</Changed>
			<Changed Source="[AnimDelay.Value]" >
				<Actions>
					<DebugTrace Message="{0} scroller AnimDelay changed to {1}">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]" />
							<ObjectPath ObjectPath="[AnimDelay.Value]"/>
						</Params>
					</DebugTrace>
				</Actions>
			</Changed>-->





			<Changed Source="[AppUtil.Config.ScrollSpeed]" InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[AppUtil.Config.ScrollSpeed]" ConditionOp="Equals" Value="Slow" />
				</Conditions>
				<Actions>
					<!--<DebugTrace Message="{0} scroller setting scrollspeed to Slow">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
						</Params>
					</DebugTrace>-->
					<Set Target="[NormalKeyRepeat]" Value="120" />
					<Set Target="[FastKeyRepeat]" Value="90" />
					<Set Target="[AnimDelay.Value]" Value="160" />
					<Set Target="[SpeedUpDelay]" Value="2" />
					
					<Set Target="[NormalScrollingAnimation]" Value="animation://anim:ScrollerGlideMedium" />
					<Set Target="[FastScrollingAnimation]" Value="animation://anim:ScrollerGlideFast" />
				</Actions>
			</Changed>
			
			<Changed Source="[AppUtil.Config.ScrollSpeed]" InitialEvaluate="true"  ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[AppUtil.Config.ScrollSpeed]" ConditionOp="Equals" Value="Medium" />
				</Conditions>
				<Actions>
					<!--<DebugTrace Message="{0} scroller setting scrollspeed to Medium">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
						</Params>
					</DebugTrace>-->
					<Set Target="[NormalKeyRepeat]" Value="100" />
					<Set Target="[FastKeyRepeat]" Value="80" />
					<Set Target="[AnimDelay.Value]" Value="160" />
					<Set Target="[SpeedUpDelay]" Value="2" />
				</Actions>
			</Changed>
			
			<Changed Source="[AppUtil.Config.ScrollSpeed]" InitialEvaluate="true"  ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[AppUtil.Config.ScrollSpeed]" ConditionOp="Equals" Value="VeryFast" />
				</Conditions>
				<Actions>
					<!--<DebugTrace Message="{0} scroller setting scrollspeed to VeryFast">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
						</Params>
					</DebugTrace>-->
					<!--<Set Target="[NormalKeyRepeat]" Value="90" />
					<Set Target="[FastKeyRepeat]" Value="50" />
					<Set Target="[AnimDelay.Value]" Value="100" />
					<Set Target="[SpeedUpDelay]" Value="2" />-->

					<Set Target="[NormalKeyRepeat]" Value="100" />
					<Set Target="[FastKeyRepeat]" Value="50" />
					<Set Target="[AnimDelay.Value]" Value="140" />
					<Set Target="[SpeedUpDelay]" Value="2" />

					<Set Target="[NormalScrollingAnimation]" Value="animation://anim:ScrollerGlideFast" />
					<Set Target="[FastScrollingAnimation]" Value="animation://anim:ScrollerGlideTurbo" />
				</Actions>
			</Changed>
			
			<Changed Source="[AppUtil.Config.ScrollSpeed]" InitialEvaluate="true"  ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[AppUtil.Config.ScrollSpeed]" ConditionOp="Equals" Value="Insane" />
				</Conditions>
				<Actions>
					<!--<DebugTrace Message="{0} scroller setting scrollspeed to Insane">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
						</Params>
					</DebugTrace>-->
					<Set Target="[NormalKeyRepeat]" Value="60" />
					<Set Target="[FastKeyRepeat]" Value="40" />
					<Set Target="[AnimDelay.Value]" Value="160" />
					<Set Target="[SpeedUpDelay]" Value="2" />
					
					<Set Target="[NormalScrollingAnimation]" Value="animation://anim:ScrollerGlideFast" />
					<Set Target="[FastScrollingAnimation]" Value="animation://anim:ScrollerGlideTurbo" />
				</Actions>
			</Changed>
			<Changed Source="[AppUtil.Config.ScrollSpeed]" InitialEvaluate="true"  ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[AppUtil.Config.ScrollSpeed]" ConditionOp="Equals" Value="Fast" />
				</Conditions>
				<Actions>
					<!--<DebugTrace Message="{0} scroller setting scrollspeed to Fast">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
						</Params>
					</DebugTrace>-->
					<Set Target="[NormalKeyRepeat]" Value="130" />
					<Set Target="[FastKeyRepeat]" Value="70" />
					<Set Target="[AnimDelay.Value]" Value="150" />
					<Set Target="[SpeedUpDelay]" Value="2" />
					
					<!--<Set Target="[NormalScrollingAnimation]" Value="animation://anim:ScrollerGlideFast" />
					<Set Target="[FastScrollingAnimation]" Value="animation://anim:ScrollerGlideTurbo" />-->
				</Actions>
			</Changed>
			<!--
						Fast settings are the default if no values have been set after checking the current config setting.
						Shouldn't happen, but if an option is removed or renamed etc, or dud config file, the scrolling
						experience is still nice and zippy.
					-->
			<Condition Source="[NormalKeyRepeat]" ConditionOp="Equals" SourceValue="-1" Target="[AppUtil.Config.ScrollSpeed]" Value="Fast" />

					
			<Changed Source="[NormalScrollingAnimation]" InitialEvaluate="true">
				<Actions>
					<Invoke Target="[Repeater.DetachAnimation]" type="Move" />
					<Invoke Target="[Repeater.AttachAnimation]" animation="[NormalScrollingAnimation]" />
				</Actions>
			</Changed>

			<!--<Changed Source="[JumpForward.Invoked]">
				<Actions>
					<Invoke Target="[ScrollingData.PageDown]" />
				</Actions>
			</Changed>

			<Changed Source="[JumpBack.Invoked]">
				<Actions>
					<Invoke Target="[ScrollingData.PageUp]" />
				</Actions>
			</Changed>-->

			<Changed Source="[Folder.JILShift]" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Folder]" ConditionOp="NotEquals" Value="null" />
				</Conditions>
				<Actions>
					<Invoke Target="[ScrollingData.Scroll]" amount="[Folder.JILShift]" />
				</Actions>
			</Changed>


			<Condition Source="[RepeatGap]" ConditionOp="Equals" SourceValue="0,0">
				<Actions>
					<Set Target="[RepeatGap.Minor]" Value="[Spacing.Minor]">
						<Transformer>
							<MathTransformer MultiplyInt="4" />
						</Transformer>
					</Set>
					<Set Target="[RepeatGap.Major]" Value="[Spacing.Major]">
						<Transformer>
							<MathTransformer MultiplyInt="4" />
						</Transformer>
					</Set>
				</Actions>
			</Condition>


			<Binding Target="[MyLayout.Spacing]" Source="[Spacing]" />
			<Binding Target="[MyLayout.RepeatGap]" Source="[RepeatGap]" />


			<!--<Changed Source="[Application]" InitialEvaluate="true" ConditionLogicalOp="And">
				<Actions>

					--><!--<DebugTrace Message="normalkeyrepeat is set" />--><!--


					<Invoke Target="[Application.FixRepeatRate]" scroller="[Scroller]" val="[NormalKeyRepeat]" />

					<Invoke Target="[Repeater.DetachAnimation]" type="Move" />
					<Invoke Target="[Repeater.AttachAnimation]" animation="[NormalScrollingAnimation]" />
				</Actions>
			</Changed>-->

			<Changed Source="[NavigateIntoIndex]" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[NavigateIntoIndex]" ConditionOp="NotEquals" Value="-1" />
				</Conditions>
				<Actions>

					<!--<DebugTrace Message="{0} scroller navigating into index {1}, RDFI {2}, SelectRepeaterIndex {3}">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
							<ObjectPath ObjectPath="[NavigateIntoIndex]"/>
							<ObjectPath ObjectPath="[Repeater.DefaultFocusIndex]"/>
							<ObjectPath ObjectPath="[SelectRepeaterIndex.Value]"/>
						</Params>
					</DebugTrace>-->

					<!--<Set Target="[Repeater.DefaultFocusIndex]" Value="[NavigateIntoIndex]" />-->
					<Set Target="[SelectRepeaterIndex.Value]" Value="[NavigateIntoIndex]" />
					<Set Target="[SelectSourceIndex.Value]" Value="[NavigateIntoIndex]" />
					<Set Target="[Folder.SelectedChildIndex]" Value="[NavigateIntoIndex]" />
					<Invoke Target="[Repeater.NavigateIntoIndex]" index="[NavigateIntoIndex]" />
					<!--<Invoke Target="[Repeater.NavigateInto]" InvokePolicy="Synchronous"/>-->

					<!--<DebugTrace Message="{0} scroller after navigating, RDFI {1}, SelectRepeaterIndex is {2}">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
							<ObjectPath ObjectPath="[Repeater.DefaultFocusIndex]"/>
							<ObjectPath ObjectPath="[SelectRepeaterIndex.Value]"/>
						</Params>
					</DebugTrace>-->

					<Set Target="[NavigateIntoIndex]" Value="-1" />

				</Actions>
			</Changed>

			
			<Changed Source="[Application]" InitialEvaluate="true">
				<Actions>
					<Invoke Target="[Application.FixRepeatRate]" scroller="[Scroller]" val="[NormalKeyRepeat]" />
				</Actions>
			</Changed>

			<Changed Source="[NavCount.Value]" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[NavCount.Value]" ConditionOp="Equals" Value="[SpeedUpDelay]"/>
				</Conditions>
				<Actions>
					<Invoke Target="[Application.FixRepeatRate]" scroller="[Scroller]" val="[FastKeyRepeat]" />
				</Actions>
			</Changed>

			<Changed Source="[NavCount.Value]" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[NavCount.Value]" ConditionOp="Equals" Value="0"/>
				</Conditions>
				<Actions>
					<Invoke Target="[Application.FixRepeatRate]" scroller="[Scroller]" val="[NormalKeyRepeat]" />
				</Actions>
			</Changed>

			
			<Changed Source="[NavCount.Value]" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[NavCount.Value]" ConditionOp="Equals" Value="[SpeedUpDelay]" />
					<Equality Source="[Application.IsMouseActive]" ConditionOp="Equals" Value="false" />
				</Conditions>
				<Actions>
					<Invoke Target="[Application.FixRepeatRate]" scroller="[Scroller]" val="[FastKeyRepeat]" />

					<!--<Invoke Target="[Repeater.DetachAnimation]" type="Move" />
					<Invoke Target="[Repeater.AttachAnimation]" animation="[FastScrollingAnimation]" />-->

					<Set Target="[ScrollerInFastRepeatMode]" Value="true" />
				</Actions>
			</Changed>

			<Changed Source="[NavCount.Value]" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[NavCount.Value]" ConditionOp="Equals" Value="0" />
					<Equality Source="[ScrollerInFastRepeatMode]" ConditionOp="Equals" Value="true" />
				</Conditions>
				<Actions>
					<Invoke Target="[Application.FixRepeatRate]" scroller="[Scroller]" val="[NormalKeyRepeat]" />

					<!--<Invoke Target="[Repeater.DetachAnimation]" type="Move" />
					<Invoke Target="[Repeater.AttachAnimation]" animation="[NormalScrollingAnimation]" />-->

					<Set Target="[ScrollerInFastRepeatMode]" Value="false" />
				</Actions>
			</Changed>


			<!--These rules allow the user to move over the posters with the mouse without them scrolling away under them-->

			<Default Target="[Startup]" Value="1" ConditionLogicalOp="And">
				<Actions>
					<Set Target="[SavedScrollingData.LockedPosition]" Value="[ScrollingData.LockedPosition]" />
					<Set Target="[SavedScrollingData.LockedAlignment]" Value="[ScrollingData.LockedAlignment]" />
					<Set Target="[SavedScrollingData.BeginPadding]" Value="[ScrollingData.BeginPadding]" />
					<Set Target="[SavedScrollingData.EndPadding]" Value="[ScrollingData.EndPadding]" />
				</Actions>
			</Default>


			<!--These rules allow the user to move over the posters with the mouse without them scrolling away under them-->
			<Rule>
				<Conditions>
					<Equality Source="[Application.IsMouseActive]" Value="true" />
				</Conditions>
				<Actions>
					<Set Target="[ScrollingData.LockedPosition]" Value="-1" />
					<Set Target="[ScrollingData.LockedAlignment]" Value="-1" />
					<Set Target="[ScrollingData.BeginPadding]" Value="160" />
					<Set Target="[ScrollingData.EndPadding]" Value="160" />
				</Actions>
			</Rule>
			<Rule>
				<Conditions>
					<Equality Source="[Application.IsMouseActive]" Value="false" />
				</Conditions>
				<Actions>
					<Set Target="[ScrollingData.LockedPosition]" Value="[SavedScrollingData.LockedPosition]" />
					<Set Target="[ScrollingData.LockedAlignment]" Value="[SavedScrollingData.LockedAlignment]" />
					<Set Target="[ScrollingData.BeginPadding]" Value="[SavedScrollingData.BeginPadding]" />
					<Set Target="[ScrollingData.EndPadding]" Value="[SavedScrollingData.EndPadding]" />
				</Actions>
			</Rule>
			<!-- End Mouse rules-->




			<!--
			
			OFFLINE CODE
			



			<Changed Source="[FocusTimer.Tick]" ConditionLogicalOp="And">
				<Conditions>
					-->
			<!--<Equality Source="[SourceIsItemList]" ConditionOp="Equals" Value="false" />-->
			<!--
					<Equality Source="[FocusTimer.Interval]" ConditionOp="GreaterThan" Value="0" />
					<Equality Source="[Folder]" ConditionOp="NotEquals" Value="null" />
				</Conditions>
				<Actions>
					-->
			<!--<DebugTrace Message="focustimer fired for scroller on folder {0}, setting default focus index">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]" />
						</Params>
					</DebugTrace>-->
			<!--

					<Set Target="[SelectRepeaterIndex.Value]" Value="[Repeater.DefaultFocusIndex]" />
					<Set Target="[SelectSourceIndex.Value]" Value="[Repeater.DefaultFocusIndex]" />
					<Invoke Target="[Repeater.NavigateIntoIndex]" index="[Repeater.DefaultFocusIndex]" />
				</Actions>
			</Changed>-->


			<Changed Source="[FocusTimer.Tick]" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[FocusTimer.Interval]" ConditionOp="GreaterThan" Value="0" />
					<Equality Source="[Folder]" ConditionOp="NotEquals" Value="null" />
				</Conditions>
				<Actions>
					<!--<DebugTrace Message="{0} scroller focustimer fired at interval {1}">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]" />
							<ObjectPath ObjectPath="[FocusTimer.Interval]" />
						</Params>
					</DebugTrace>-->
					<Set Target="[SelectRepeaterIndex.Value]" Value="[Repeater.DefaultFocusIndex]" />
					<Set Target="[SelectSourceIndex.Value]" Value="[Repeater.DefaultFocusIndex]" />
					<Invoke Target="[Repeater.NavigateIntoIndex]" index="[Repeater.DefaultFocusIndex]" />
				</Actions>
			</Changed>





			<!--
				Deal with HOME and END key events ourselves as WMC is crap at switching
				between horizontal and vertical orientation and just gives up or
				gets it totally wrong!!!
			-->
			<Changed Source="[HomeKeyCommand.Invoked]">
				<Actions>

					<!--<DebugTrace Message="home key event caught! for {0}" >
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
						</Params>
					</DebugTrace>-->
					
					<Invoke Target="[Repeater.NavigateIntoIndex]" index="0" />
				</Actions>
			</Changed>

			<Changed Source="[EndKeyCommand.Invoked]">
				<Actions>

					<!--<DebugTrace Message="end key event caught! for {0}" >
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
						</Params>
					</DebugTrace>-->

					<Set Target="[FinalItemIndex]" Value="[Repeater.Source.Count]">
						<Transformer>
							<MathTransformer SubtractInt="1" />
						</Transformer>
					</Set>
					<!--<DebugTrace Message="end item is... {0} of {1}" >
						<Params>
							<ObjectPath ObjectPath="[FinalItemIndex]"/>
							<ObjectPath ObjectPath="[Repeater.Source.Count]"/>
						</Params>
					</DebugTrace>-->

					<Set Target="[NavigateIntoIndex]" Value="[FinalItemIndex]" />
					<Invoke Target="[Repeater.NavigateIntoIndex]" index="[FinalItemIndex]" />


					<!--<Invoke Target="[Repeater.NavigateIntoIndex]" index="[FinalItemIndex]" />-->
					<!--<DebugTrace Message="end item navigation done" />-->
				</Actions>
			</Changed>


			<!--<Changed Source="[Folder]"  InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Folder]" ConditionOp="NotEquals" Value="null" />
					<IsValid Source="[Folder.ActualThumbSize]" />
					<Equality Source="[ImageSizeAnyHeight]" ConditionOp="Equals" Value="true" />
				</Conditions>
				<Actions>
					<Set Target="[ImageSize]" Value="[Folder.ActualThumbSize.Value]" />
					<Set Target="[ImageSize.Height]" Value="0" />

					<DebugTrace Message="BaseScroller folder changed to {0}, using ActualThumbSize {1} anyheight to get {2} (reference is {3})">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
							<ObjectPath ObjectPath="[Folder.ActualThumbSize.Value]"/>
							<ObjectPath ObjectPath="[ImageSize]"/>
							<ObjectPath ObjectPath="[Folder.ReferenceSize]"/>
						</Params>
					</DebugTrace>
				</Actions>
			</Changed>-->
			<!--<Binding Source="[Folder.ActualThumbSize]" Target="[ImageSize]" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Folder]" ConditionOp="NotEquals" Value="null" />
					<IsValid Source="[Folder.ActualThumbSize.Value]" />
					<Equality Source="[ImageSizeAnyHeight]" ConditionOp="Equals" Value="false" />
					<Equality Source="[ImageSize.Value.Width]" ConditionOp="Equals" Value="0" />
					<Equality Source="[ImageSize.Value.Height]" ConditionOp="Equals" Value="0" />
					<Equality Source="[MaximumImageSize.Value.Width]" ConditionOp="Equals" Value="0" />
					<Equality Source="[MaximumImageSize.Value.Height]" ConditionOp="Equals" Value="0" />
				</Conditions>
				<Actions>
					<DebugTrace Message="{0} scroller imagesize now {1} from actualthumbsize {2}">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
							<ObjectPath ObjectPath="[ImageSize.Value]"/>
							<ObjectPath ObjectPath="[Folder.ActualThumbSize.Value]"/>
						</Params>
					</DebugTrace>
				</Actions>
			</Binding>-->


			<!--<Changed Source="[Folder]"  InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Folder]" ConditionOp="NotEquals" Value="null" />
					<IsValid Source="[Folder.ReferenceSize]" />
					<Equality Source="[ImageSizeAnyHeight]" ConditionOp="Equals" Value="false" />
					<Equality Source="[ImageSize.Value.Width]" ConditionOp="Equals" Value="0" />
					<Equality Source="[ImageSize.Value.Height]" ConditionOp="Equals" Value="0" />
					<Equality Source="[MaximumImageSize.Value.Width]" ConditionOp="Equals" Value="0" />
					<Equality Source="[MaximumImageSize.Value.Height]" ConditionOp="Equals" Value="0" />
				</Conditions>
				<Actions>
					<Set Target="[ImageSize.Value]" Value="[Folder.ReferenceSize]" />
					<DebugTrace Message="BaseScroller folder changed to {0}, imagesize {1} from ReferenceSize {2} (actualthumbsize is {3})">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
							<ObjectPath ObjectPath="[ImageSize.Value]"/>
							<ObjectPath ObjectPath="[Folder.ReferenceSize]"/>
							<ObjectPath ObjectPath="[Folder.ActualThumbSize.Value]"/>
						</Params>
					</DebugTrace>
				</Actions>
			</Changed>-->


			<Binding Target="[ImageSize.Value]" Source="[Folder.ReferenceSize]"  ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Folder]" ConditionOp="NotEquals" Value="null" />
					<IsValid Source="[Folder.ReferenceSize]" />
					<!--<IsValid Source="[Folder.ActualThumbSize]" />-->
					<Equality Source="[ImageSizeAnyHeight]" ConditionOp="Equals" Value="false" />
				</Conditions>
				<!--<Actions>

					<DebugTrace Message="BaseScroller folder changed to {0}, using reference {1} (ActualThumbSize.Value is {2})">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
							<ObjectPath ObjectPath="[Folder.ReferenceSize]"/>
							<ObjectPath ObjectPath="[Folder.ActualThumbSize.Value]"/>
						</Params>
					</DebugTrace>
				</Actions>-->
			</Binding>


			<Changed Source="[Folder]"  InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Folder]" ConditionOp="NotEquals" Value="null" />
					<IsValid Source="[Folder.ReferenceSize]" />
					<!--<IsValid Source="[Folder.ActualThumbSize]" />-->
					<Equality Source="[ImageSizeAnyHeight]" ConditionOp="Equals" Value="false" />
				</Conditions>
				<Actions>
					<Set Target="[ImageSize.Value]" Value="[Folder.ReferenceSize]" />
					<!--<Set Target="[ImageSize]" Value="[Folder.ActualThumbSize]" />-->

					<!--<DebugTrace Message="BaseScroller folder changed to {0}, using reference {1} (ActualThumbSize.Value is {2})">
						<Params>
							<ObjectPath ObjectPath="[Folder.Name]"/>
							<ObjectPath ObjectPath="[Folder.ReferenceSize]"/>
							<ObjectPath ObjectPath="[Folder.ActualThumbSize.Value]"/>
						</Params>
					</DebugTrace>-->
				</Actions>
			</Changed>




			
			<Binding Target="[HasFocus]" Source="[Input.DeepKeyFocus]" />



			<Default Target="[ScrollingData.Repeater]" Value="[Repeater]" />
			<Binding Target="[ScrollingHandler.HandleHomeEndKeys]" Source="[HomeAndEndEnabled]" />
			<Binding Target="[ScrollingHandler.ScrollingData]" Source="[ScrollingData]" />
			<Binding Target="[Scroller.ScrollingData]" Source="[ScrollingData]" />
			<Binding Target="[Repeater.Layout]" Source="[MyLayout]" />



			<Condition Source="[ScrollingData.CanScrollUp]" SourceValue="true" Target="[Scroller.ShowNear]" Value="true" />
			<Condition Source="[ScrollingData.CanScrollDown]" SourceValue="true" Target="[Scroller.ShowFar]" Value="true" />

			<Condition Source="[ScrollingData.CanScrollUp]" SourceValue="true" Target="[ArrowLeft.Visible]" Value="true" ConditionLogicalOp ="And">
				<Conditions>
					<Equality Source="[Scroller.Orientation]" ConditionOp="Equals" Value="Horizontal" />
					<IsValid Source="[ArrowLeft]" />
				</Conditions>
			</Condition>
			<Condition Source="[ScrollingData.CanScrollDown]" SourceValue="true" Target="[ArrowRight.Visible]" Value="true" ConditionLogicalOp ="And">
				<Conditions>
					<Equality Source="[Scroller.Orientation]" ConditionOp="Equals" Value="Horizontal" />
					<IsValid Source="[ArrowRight]" />
				</Conditions>
			</Condition>
		</Rules>

		<Content>

			<ColorFill Name="Main" Content="Transparent" Layout="Form">
				<Children>
					<Graphic Name="ArrowLeft" Content="image://il:ScrollerArrowLeft" MaintainAspectRatio="true" Alpha="0.5" ColorFilter="color://s:ROC_GlassTint" Visible="false">
						<LayoutInput>
							<FormLayoutInput Left="Scroller,0,10" Top="Scroller,0" Bottom="Scroller,1" Vertical="Center" Horizontal="Near"
																			ContributesToHeight="false" ContributesToWidth="false"/>
						</LayoutInput>
					</Graphic>
					<Graphic Name="ArrowRight" Content="image://il:ScrollerArrowRight" MaintainAspectRatio="true" Alpha="0.5" ColorFilter="color://s:ROC_GlassTint" Visible="false" >
						<LayoutInput>
							<FormLayoutInput Right="Scroller,1,-10" Top="Scroller,0" Bottom="Scroller,1" Vertical="Center" Horizontal="Far"
																			ContributesToHeight="false" ContributesToWidth="false"/>
						</LayoutInput>
					</Graphic>
					
					<Graphic Name="ViewFinder"  ColorFilter="color://s:ROC_GlassTint" MaintainAspectRatio="false" SizingPolicy="SizeToConstraint" Alpha="0.9">
						<Animations>
							<Animation Animation="animation://anim:ScrollerGlideFast" />
							<Animation Animation="animation://anim:ContentChangeShow.Alpha.Fast" />
							<Animation Animation="animation://anim:ContentChangeHide.Alpha.Fast" />
							<Animation Animation="animation://anim:Show.Alpha.Fast" />
							<Animation Animation="animation://anim:Hide.Alpha.Fast" />
						</Animations>
					</Graphic>
					
					<Scroller Name="Scroller" Orientation="Horizontal"
															ScrollingData="[ScrollingData]"
															FadeSize="75" ShowNear="false" ShowFar="false"
															Navigation="RememberFocus"
															LayoutInput="[ScrollerLayoutInput]"
															FocusOrder="0"
															MouseInteractive="true">

						<Children>

							<Repeater Name="Repeater"
															Margins="[RepeaterMargins]"
															Navigation="FlowHorizontal,WrapHorizontal"
															DiscardOffscreenVisuals="true"
															ContentName="RepeaterItem"
															DefaultFocusIndex="0">
								<!--<Animations>
									<Animation Animation="[NormalScrollingAnimation]" />
									<Animation Type="Size"  CenterPointPercent=".5,.5,.5">
										<Keyframes>
											<SizeKeyframe Time="0" RelativeTo="Current"  Interpolation="EaseIn,1.0,0.25"/>
											<SizeKeyframe Time="0.4" RelativeTo="Final" />
										</Keyframes>
									</Animation>
								</Animations>-->
							</Repeater>
						</Children>
					</Scroller>

				</Children>
			</ColorFill>

		</Content>

		<Content Name="RepeaterItem">

			<cfi:CoverflowItem
									Application="[Application]"
									AppUtil="[AppUtil]"
									VisibleIndexRangeForSelectRepeaterIndex="[VisibleIndexRangeForSelectRepeaterIndex]"
									VisibleItemIndexRangeFrom="[VisibleItemIndexRangeFrom]"
									VisibleItemIndexRangeTo="[VisibleItemIndexRangeTo]"
									ItemIndex="[RepeatedItemIndex]"
									Item="[RepeatedItem!lib:Item]"
									ParentItem="[Folder]"
									SelectRepeaterIndex="[SelectRepeaterIndex]"
									SelectSourceIndex="[SelectSourceIndex]"
									ImageSize="[ImageSize]"
									AnimDelay="[AnimDelay]"
									NavCount="[NavCount]"
 />

		</Content>
	</UI>

	<UI Name="LayoutBaseScroller" BaseUI="me:INTERNAL_LayoutBaseScroller">

		<Locals>
			<cor:Int32 Name="FolderStartup" />
			<cor:Int32 Name="backFocus" Int32="-1" />
		</Locals>

		<Rules>

			<!-- Update cover repeater on items change. -->
			<!--
			<Changed Source="[SourceList]" InitialEvaluate="true">
				<Actions>
					<Set Target="[Repeater.Source]" Value="[SourceList]" />
					<Set  Target="[Folder.SelectedChildIndex]" Value="-1"/>
				</Actions>
			</Changed>
			-->
			
			<Binding Source="[SourceList]" Target="[Repeater.Source]" />


			<Default Target="[FolderStartup]" Value="1" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Application.NavigatingForward]" Value="true"/>
					<Equality Source="[GoToFirstUnwatchedOnLoad]" ConditionOp="Equals" Value="true" />
					<Equality Source="[SourceListIsChildren]" ConditionOp="Equals" Value="true" />
					<IsValid Source="[SourceList.Count]" />
					<Equality Source="[SourceList.Count]" ConditionOp="GreaterThan" Value="0" />
					<Equality Source="[FolderStartup]" ConditionOp="Equals" Value="0" />
				</Conditions>
				<Actions>

					<!--<DebugTrace Message="doing startup navigation" />-->
					
					<Set Target="[Folder.SelectedChildIndex]" Value="[Folder.FirstUnwatchedIndex]" />
					<Set Target="[Repeater.DefaultFocusIndex]" Value="[Folder.FirstUnwatchedIndex]" />
					<Invoke Target="[Repeater.NavigateIntoIndex]"  index="[Folder.FirstUnwatchedIndex]" InvokePolicy="Synchronous"/>
				</Actions>
			</Default>
			
			<!--<Rule ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Application.NavigatingForward]" ConditionOp="Equals" Value="true" />
					<Equality Source="[GoToFirstUnwatchedOnLoad]" ConditionOp="Equals" Value="true" />
					<Equality Source="[SourceListIsChildren]" ConditionOp="Equals" Value="true" />
					<IsValid Source="[SourceList.Count]" />
					<Equality Source="[SourceList.Count]" ConditionOp="GreaterThan" Value="0" />
				</Conditions>
				<Actions>

					<DebugTrace Message="navigating forwards in real children list - defaulting to first unwatched item" />

					<Set Target="[Folder.SelectedChildIndex]" Value="[Folder.FirstUnwatchedIndex]" />
					<Set Target="[Repeater.DefaultFocusIndex]" Value="[Folder.FirstUnwatchedIndex]" />
				</Actions>
			</Rule>-->

			<!--<Default Target="[backFocus]" Value="[Folder.SelectedChildIndex]" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[backFocus]" ConditionOp="Equals" Value="-1" />
					<IsValid Source="[Folder.SelectedChildIndex]" />
				</Conditions>
			</Default>

			<Rule ConditionLogicalOp="And" >
				<Conditions>
					<Equality Source="[Application.NavigatingForward]" Value="false"/>
					<Equality Source="[Folder.Children.Count]" ConditionOp="GreaterThan" Value="0" />
				</Conditions>
				<Actions>
					<Invoke Target="[Repeater.NavigateIntoIndex]"  index="[backFocus]"/>
				</Actions>
			</Rule>-->


			<!-- Update cover repeater on items change. -->
			<Changed Source="[SourceList]" InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Folder]" ConditionOp="NotEquals" Value="null" />
					<Equality Source="[SourceListIsChildren]" ConditionOp="Equals" Value="true" />
					<IsValid Source="[SourceList.Count]" />
				</Conditions>
				<Actions>
					<!--<Set Target="[Repeater.Source]" Value="[SourceList]" />-->
					<!--<Set Target="[Folder.SelectedChildIndex]" Value="0" />-->

					<!--<DebugTrace Message="sourcelist changed for real children list - defaulting to folder.selectedchildindex" />-->

					<Set Target="[SelectRepeaterIndex.Value]" Value="[Folder.SelectedChildIndex]" />

					<Invoke Target="[FocusTimer.Start]" />

				</Actions>
			</Changed>

			<!--<Rule ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Application.NavigatingForward]" ConditionOp="Equals" Value="false" />
					<IsValid Source="[Folder.Children.Count]" />
					<Equality Source="[Folder.Children.Count]" ConditionOp="GreaterThan" Value="0" />
				</Conditions>
				<Actions>
					<Set Target="[SelectRepeaterIndex.Value]" Value="[Folder.SelectedChildIndex]" />
				</Actions>
			</Rule>-->

			<!--<Rule ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Folder]" ConditionOp="NotEquals" Value="null" />
					<Equality Source="[Application.NavigatingForward]" ConditionOp="Equals" Value="true" />
					<Equality Source="[GoToFirstUnwatchedOnLoad]" ConditionOp="Equals" Value="true" />
					<IsValid Source="[Folder.Children.Count]" />
					<Equality Source="[Folder.Children.Count]" ConditionOp="GreaterThan" Value="0" />
					<IsValid Source="[Folder.SelectedChildIndex]" />
				</Conditions>
				<Actions>
					<Set Target="[Folder.SelectedChildIndex]" Value="[Folder.FirstUnwatchedIndex]" />
					<Set Target="[Repeater.DefaultFocusIndex]" Value="[Folder.FirstUnwatchedIndex]" />
				</Actions>
			</Rule>-->
		</Rules>
	</UI>
</Mcml>
