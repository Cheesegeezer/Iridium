<Mcml xmlns="http://schemas.microsoft.com/2006/mcml"
      xmlns:cor="assembly://MSCorLib/System"
      xmlns:a="assembly://MediaBrowser/MediaBrowser"

      xmlns:lib="assembly://MediaBrowser/MediaBrowser.Library"

      xmlns:art="resx://ROC/ROC.Resources/Artwork"
      xmlns:s="resx://ROC/ROC.Resources/StylesMerged"
      xmlns:f="file://Fonts_DoNotEdit.mcml"
      xmlns:il="resx://ROC/ROC.Resources/Images"
      xmlns:bvi="resx://ROC/ROC.Resources/ROCBasicViewItem"
      xmlns:tb="resx://ROC/ROC.Resources/ToolBox"
      xmlns:app="assembly://ROC/ROC"

      xmlns:cvi="resx://ROC/ROC.Resources/ROCViewItem"

      xmlns:anim="resx://ROC/ROC.Resources/Animations"
      xmlns:sounds="resx://ROC/ROC.Resources/Sounds"
      xmlns:me="Me">

	<UI Name="ThumbItem" BaseUI="bvi:ROCBasicViewItem">
		<Properties>
			<FlowLayout Name="LayoutContentVerticalFar" Orientation="Vertical" ItemAlignment="Far" />
			<FlowLayout Name="LayoutContentVerticalCenter" Orientation="Vertical" ItemAlignment="Center" />

			<MathTransformer Name="PositiveTransformer" Absolute="true" />
			<MathTransformer Name="SubtractSelectedItemIndexTransformer" Absolute="true" />
			<cor:Random Name="Random" />
    
		</Properties>


		<Locals>
			<MathTransformer Name="DistanceScaleTransformer" />

			<cor:Boolean Name="IsStartup" Boolean="true" />

			<cor:Int32 Name="Offset" Int32="0" />

			<Inset Name="TmpMargins" Inset="0,0,0,0" />
			<Inset Name="TmpPadding" Inset="0,0,0,0" />
			<Vector3 Name="TmpScale" Vector3="1,1,1" />
			<Vector3 Name="DistanceScale" Vector3="1,1,1" />
			<!--<Rotation Name="Rot" Rotation="0deg;1,0,0" />-->

			<Command Name="CalculateScalingCommand" />

			<cor:String Name="ImageType" String="" />
		</Locals>

		<Rules>


			<Rule>
				<Actions>
					<Set Target="[TmpMargins]" Value="[DefaultMargins]" ExclusiveApply="false" />
					<Set Target="[TmpPadding]" Value="[DefaultPadding]" ExclusiveApply="false" />
					<Set Target="[TmpScale]" Value="1,1,1" ExclusiveApply="false" />
				</Actions>
			</Rule>

      

			<!--<Changed Source="[Input.KeyFocus]" InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Input.KeyFocus]" Value="true" />
				</Conditions>
				<Actions>
					<Invoke Target="[AnimTimer.Start]" />

					<Set Target="[ParentItem.SelectedChildIndex]" Value="[ItemIndex.SourceValue]" />
					<Set Target="[SelectRepeaterIndex.Value]" Value="[ItemIndex.Value]" />
					<Set Target="[Application.CurrentItem]" Value="[Item]" />

					<Set Target="[Main.ColorFilter]" Value="White" />
					<Set Target="[Main.Alpha]" Value="1" />
				</Actions>
			</Changed>

			<Changed Source="[Input.KeyFocus]">
				<Conditions>
					<Equality Source="[Input.KeyFocus]" Value="false" />
				</Conditions>
				<Actions>
					<Set Target="[Main.Scale]" Value="1,1,1" />

					<Set Target="[NavCount.Value]" Value="[NavCount.Value]" ExclusiveApply="false">
						<Transformer>
							<MathTransformer Add="1" />
						</Transformer>
					</Set>
					<Set Target="[InFocus.Value]" Value="false" />
				</Actions>
			</Changed>


			<Changed Source="[AnimTimer.Tick]" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Input.KeyFocus]" Value="true" />
				</Conditions>
				<Actions>
					<Set Target="[InFocus.Value]" Value="true" />
					<Set Target="[NavCount.Value]" Value="0" ExclusiveApply="false" />
					<Set Target="[Name.Color]" Value="color://s:ROC_Menu_Text_Focus" />
					<Set Target="[Logo.AddShadow]" Value="true" />
				</Actions>
			</Changed>


			<Changed Source="[InFocus.Value]" InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Input.KeyFocus]" Value="true" />
					<Equality Source="[NavCount.Value]" ConditionOp="LessThanOrEquals" Value="1" />
				</Conditions>
				<Actions>
					<Set Target="[Main.Scale]" Value="1.2,1.2,1" />
				</Actions>
			</Changed>-->



			<!-- *************************************************************************** -->
			<!-- ITEM FOCUS WHEN NAVIGATION HAS PAUSED AND NOT JUST WHIZZED BY IN A SCROLLER -->
			<!-- *************************************************************************** -->

			<Changed Source="[Input.KeyFocus]" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Input.KeyFocus]" Value="true" />
				</Conditions>
				<Actions>

					<Set Target="[Logo.AddShadow]" Value="true" />

					<Set Target="[Name.Color]" Value="color://s:ROC_Menu_Text_Focus" />

				</Actions>
			</Changed>



			<Condition Source="[SelectRepeaterIndex.Value]" ConditionOp="Equals" SourceValue="[ItemIndex.Value]" ConditionLogicalOp="And">
				<!--<Conditions>
					<Equality Source="[ItemIndex.Value]" ConditionOp="GreaterThanOrEquals" Value="[VisibleItemIndexRangeFrom.Value]" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="LessThanOrEquals" Value="[VisibleItemIndexRangeTo.Value]" />
				</Conditions>-->
				<Actions>
					<Set Target="[Main.Padding]" Value="0,15,25,15" />
				</Actions>
			</Condition>




			<Changed Source="[CalculateScalingCommand.Invoked]" InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[ItemIndex.Value]" ConditionOp="GreaterThanOrEquals" Value="[VisibleItemIndexRangeFrom.Value]" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="LessThanOrEquals" Value="[VisibleItemIndexRangeTo.Value]" />
					<Equality Source="[AppUtil.FolderConfig.ThumbViewScrollerCurved]" ConditionOp="Equals" Value="true" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="NotEquals" Value="[SelectRepeaterIndex.Value]" />
				</Conditions>
				<Actions>

					<Set Target="[SubtractSelectedItemIndexTransformer.SubtractInt]" Value="[SelectRepeaterIndex.Value]" />
					<Set Target="[Offset]" Value="[ItemIndex.Value]" Transformer="[SubtractSelectedItemIndexTransformer]" />

					<Set Target="[TmpPadding.Top]" Value="-15" />
					<Set Target="[TmpPadding.Bottom]" Value="-15" />
					<Set Target="[TmpPadding.Right]" Value="[Offset]">
						<Transformer>
							<MathTransformer Multiply="40" />
						</Transformer>
					</Set>
					<Set Target="[TmpPadding.Left]" Value="[TmpPadding.Right]">
						<Transformer>
							<MathTransformer Multiply="-1" />
						</Transformer>
					</Set>

					<Set Target="[Main.Padding]" Value="[TmpPadding]" />


					<Set Target="[DistanceScaleTransformer.Subtract]" Value="[Offset]">
						<Transformer>
							<MathTransformer Multiply="0.08" Type="Single" />
						</Transformer>
					</Set>

					<Set Target="[DistanceScale.X]" Value="[DistanceScale.Z]" Transformer="[DistanceScaleTransformer]" />
					<Set Target="[DistanceScale.Y]" Value="[DistanceScale.Z]" Transformer="[DistanceScaleTransformer]" />
					<Set Target="[Main.Scale]" Value="[DistanceScale]" />


					<!--<DebugTrace Message="item {0}, index {1}, sel {2}, offset {3} scaled etc to padding {4}, scale {5}">
						<Params>
							<ObjectPath ObjectPath="[Item.Name]" />
							<ObjectPath ObjectPath="[ItemIndex.Value]" />
							<ObjectPath ObjectPath="[SelectRepeaterIndex.Value]" />
							<ObjectPath ObjectPath="[Offset]" />
							<ObjectPath ObjectPath="[Main.Padding.ToString]" />
							<ObjectPath ObjectPath="[Main.Scale.ToString]" />
						</Params>
					</DebugTrace>-->


					<!--
					<Set Target="[Rot.AngleDegrees]" Value="[Offset]">
						<Transformer>
							<MathTransformer Multiply="-25" />
						</Transformer>
					</Set>

					<DebugTrace Message="rotation angle is... {0}, offset {1}">
						<Params>
							<ObjectPath ObjectPath="[Rot]" />
							<ObjectPath ObjectPath="[Offset]" />
						</Params>
					</DebugTrace>

					<Set Target="[Main.Rotation]" Value="[Rot]" />
					-->

				</Actions>

			</Changed>

			<Changed Source="[VisibleItemIndexRangeFrom.Value]" InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[AppUtil.FolderConfig.ThumbViewScrollerCurved]" ConditionOp="Equals" Value="true" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="GreaterThanOrEquals" Value="[VisibleItemIndexRangeFrom.Value]" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="LessThanOrEquals" Value="[VisibleItemIndexRangeTo.Value]" />
				</Conditions>

				<Actions>

					<Invoke Target="[CalculateScalingCommand.Invoke]" />

				</Actions>
			</Changed>

			<Changed Source="[AppUtil.FolderConfig.ThumbViewScrollerCurved]" InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[AppUtil.FolderConfig.ThumbViewScrollerCurved]" ConditionOp="Equals" Value="true" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="GreaterThanOrEquals" Value="[VisibleItemIndexRangeFrom.Value]" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="LessThanOrEquals" Value="[VisibleItemIndexRangeTo.Value]" />
				</Conditions>

				<Actions>

					<Invoke Target="[CalculateScalingCommand.Invoke]" />

				</Actions>
			</Changed>

			<Changed Source="[AppUtil.FolderConfig.ThumbViewScrollerCurved]" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[ItemIndex.Value]" ConditionOp="GreaterThanOrEquals" Value="[VisibleItemIndexRangeFrom.Value]" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="LessThanOrEquals" Value="[VisibleItemIndexRangeTo.Value]" />
					<Equality Source="[AppUtil.FolderConfig.ThumbViewScrollerCurved]" ConditionOp="Equals" Value="false" />
				</Conditions>

				<Actions>

					<Set Target="[Main.Padding]" Value="0,0,0,0" />
					<Set Target="[Main.Scale]" Value="1,1,1" />

				</Actions>
			</Changed>

			<!--<Changed Source="[ParentItem.SelectedChildIndex]" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[ItemWorthBothering]" ConditionOp="Equals" Value="true" />
					<Equality Source="[ParentItem.SelectedChildIndex]" ConditionOp="NotEquals" Value="[ItemIndex.SourceValue]" />
				</Conditions>
				<Actions>
					<Set Target="[Main.Padding]" Value="0,0,0,0" ExclusiveApply="false" />
					<Set Target="[Main.Scale]" Value="1,1,1" ExclusiveApply="false" />
				</Actions>
			</Changed>-->


			<!--<Rule ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[ItemIndex.Value]" ConditionOp="NotEquals" Value="[SelectRepeaterIndex.Value]" />
					<Equality Source="[Logo.Visible]" ConditionOp="Equals" Value="true" />
				</Conditions>
				<Actions>
					<Set Target="[TmpMargins.Top]" Value="-10" />
					<Set Target="[TmpMargins.Bottom]" Value="-10" />
					<Set Target="[Main.Margins]" Value="[TmpMargins]" ExclusiveApply="false" />
				</Actions>
			</Rule>

			<Rule ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[AppUtil.Config.ThumbViewScrollerCurved]" ConditionOp="Equals" Value="true" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="NotEquals" Value="[SelectRepeaterIndex.Value]" />
					<Equality Source="[Logo.Visible]" ConditionOp="Equals" Value="false" />
				</Conditions>
				<Actions>
					<Set Target="[TmpMargins.Top]" Value="-30" />
					<Set Target="[TmpMargins.Bottom]" Value="-30" />
					<Set Target="[Main.Margins]" Value="[TmpMargins]" />
				</Actions>
			</Rule>-->

			<Changed Source="[VisibleItemIndexRangeFrom.Value]" InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[ItemIndex.Value]" ConditionOp="GreaterThanOrEquals" Value="[VisibleItemIndexRangeFrom.Value]" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="LessThanOrEquals" Value="[VisibleItemIndexRangeTo.Value]" />
				</Conditions>
				<Actions>
					<Set Target="[ImageType]" Value="" ExclusiveApply="false" />
				</Actions>
			</Changed>
			
			<Changed Source="[ImageType]" InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[ImageType]" ConditionOp="Equals" Value="Preferred" />
				</Conditions>
				<Actions>
					<Set Target="[Logo.Visible]" Value="false" />
					<Set Target="[OtherImage.Content]" Value="[Item.PreferredImage]" InvokePolicy="AsynchronousNormal" />
					<Set Target="[OtherImage.Visible]" Value="true" />
				</Actions>
			</Changed>

			<Changed Source="[ImageType]" InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[ImageType]" ConditionOp="Equals" Value="Thumbnail" />
				</Conditions>
				<Actions>
					<Set Target="[Logo.Visible]" Value="false" />
					<Set Target="[OtherImage.Content]" Value="[Item.ThumbnailImage]" InvokePolicy="AsynchronousNormal" />
					<Set Target="[OtherImage.Visible]" Value="true" />
				</Actions>
			</Changed>

			<Changed Source="[ImageType]" InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[ImageType]" ConditionOp="Equals" Value="Disc" />
				</Conditions>
				<Actions>
					<Set Target="[Logo.Visible]" Value="false" />
					<Set Target="[OtherImage.Content]" Value="[Item.DiscImage]" InvokePolicy="AsynchronousNormal" />
					<Set Target="[OtherImage.Visible]" Value="true" />
				</Actions>
			</Changed>

			<Changed Source="[ImageType]" InitialEvaluate="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[ImageType]" ConditionOp="Equals" Value="Logo" />
				</Conditions>
				<Actions>
					<Set Target="[OtherImage.Content]" Value="null" />
					<Set Target="[OtherImage.Visible]" Value="false" />
					<Set Target="[Logo.Item]" Value="[Item]" />
					<Set Target="[Logo.Visible]" Value="true" />
				</Actions>
			</Changed>


			<!-- Determine image type to show in scroller, or maybe just plain old text name -->

			<Condition Source="[Item.Series]" ConditionOp="NotEquals" SourceValue="null" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[ItemIndex.Value]" ConditionOp="GreaterThanOrEquals" Value="[VisibleItemIndexRangeFrom.Value]" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="LessThanOrEquals" Value="[VisibleItemIndexRangeTo.Value]" />
					<Equality Source="[Item.Series.ItemTypeString]" ConditionOp="Equals" Value="Series" />
					<Equality Source="[Item.Series.Name]" ConditionOp="NotEquals" Value="Unknown" />
					<Equality Source="[Item.ItemTypeString]" ConditionOp="NotEquals" Value="Series" />
					<Equality Source="[Item.HasPreferredImage]" ConditionOp="Equals" Value="true" />
					<Equality Source="[Item.PreferredImage]" ConditionOp="NotEquals" Value="null" />
				</Conditions>
				<Actions>
					<!--<DebugTrace Message="item {0} type {1} in series {2} ID#{3}">
						<Params>
							<ObjectPath ObjectPath="[Item.Name]" />
							<ObjectPath ObjectPath="[Item.ItemTypeString]" />
							<ObjectPath ObjectPath="[Item.Series.Name]" />
							<ObjectPath ObjectPath="[Item.Series.Id]" />
						</Params>
					</DebugTrace>-->

					<Set Target="[ImageType]" Value="Preferred" />
				</Actions>
			</Condition>

			<Condition Source="[Item.Series]" ConditionOp="NotEquals" SourceValue="null" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[ItemIndex.Value]" ConditionOp="GreaterThanOrEquals" Value="[VisibleItemIndexRangeFrom.Value]" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="LessThanOrEquals" Value="[VisibleItemIndexRangeTo.Value]" />
					<Equality Source="[Item.ItemTypeString]" ConditionOp="NotEquals" Value="Series" />
					<Equality Source="[Item.HasPreferredImage]" ConditionOp="Equals" Value="false" />
					<Equality Source="[Item.HasThumbnailImage]" ConditionOp="Equals" Value="true" />
					<Equality Source="[Item.ThumbnailImage]" ConditionOp="NotEquals" Value="null" />
				</Conditions>
				<Actions>
					<Set Target="[ImageType]" Value="Thumbnail" />
				</Actions>
			</Condition>

			<Condition Source="[Logo.Visible]" ConditionOp="Equals" SourceValue="true" Target="[FocusFrame.Content]" Value="null" />


			<Condition Source="[Item.HasLogoImage]" ConditionOp="Equals" SourceValue="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[ItemIndex.Value]" ConditionOp="GreaterThanOrEquals" Value="[VisibleItemIndexRangeFrom.Value]" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="LessThanOrEquals" Value="[VisibleItemIndexRangeTo.Value]" />
					<Equality Source="[AppUtil.FolderConfig.ThumbViewScrollerShowLogo]" ConditionOp="Equals" Value="true" />
					<Equality Source="[Item.LogoImage]" ConditionOp="NotEquals" Value="null" />
				</Conditions>
				<Actions>
					<Set Target="[ImageType]" Value="Logo" />
				</Actions>
			</Condition>

			<Condition Source="[Item.HasThumbnailImage]" ConditionOp="Equals" SourceValue="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[AppUtil.FolderConfig.ThumbViewScrollerShowThumb]" ConditionOp="Equals" Value="true" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="GreaterThanOrEquals" Value="[VisibleItemIndexRangeFrom.Value]" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="LessThanOrEquals" Value="[VisibleItemIndexRangeTo.Value]" />
					<Equality Source="[Item.ThumbnailImage]" ConditionOp="NotEquals" Value="null" />
				</Conditions>
				<Actions>
					<Set Target="[ImageType]" Value="Thumbnail" />
				</Actions>
			</Condition>

			<Condition Source="[Item.HasDiscImage]" ConditionOp="Equals" SourceValue="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[AppUtil.FolderConfig.ThumbViewScrollerShowDisc]" ConditionOp="Equals" Value="true" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="GreaterThanOrEquals" Value="[VisibleItemIndexRangeFrom.Value]" />
					<Equality Source="[ItemIndex.Value]" ConditionOp="LessThanOrEquals" Value="[VisibleItemIndexRangeTo.Value]" />
					<Equality Source="[Item.DiscImage]" ConditionOp="NotEquals" Value="null" />
				</Conditions>
				<Actions>
					<Set Target="[ImageType]" Value="Disc" />
				</Actions>
			</Condition>


			<Changed Source="[AppUtil.FolderConfig.ThumbViewScrollerShowLogo]" ConditionLogicalOp="And">
				<Actions>
					<Set Target="[ImageType]" Value="" />
				</Actions>
			</Changed>

			<Changed Source="[AppUtil.FolderConfig.ThumbViewScrollerShowThumb]" ConditionLogicalOp="And">
				<Actions>
					<Set Target="[ImageType]" Value="" />
				</Actions>
			</Changed>

			<Changed Source="[AppUtil.FolderConfig.ThumbViewScrollerShowDisc]" ConditionLogicalOp="And">
				<Actions>
					<Set Target="[ImageType]" Value="" />
				</Actions>
			</Changed>

			<Binding Source="[Item.Name]" Target="[Name.Content]" />

			<Condition Source="[AppUtil.FolderConfig.ThumbViewScrollerAlwaysShowName]" ConditionOp="Equals" SourceValue="true"
			           Target="[Name.Visible]" Value="true" />
			<Condition Source="[Logo.Visible]" ConditionOp="Equals" SourceValue="true"
			           Target="[Name.Visible]" Value="false" />
			<Condition Source="[OtherImage.Visible]" ConditionOp="Equals" SourceValue="true"
			           Target="[Name.Visible]" Value="false" />

			<Condition Source="[Name.Visible]" ConditionOp="Equals" SourceValue="true" ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Logo.Visible]" ConditionOp="Equals" Value="false" />
					<Equality Source="[OtherImage.Visible]" ConditionOp="Equals" Value="false" />
				</Conditions>
				<Actions>
					<Set Target="[Name.Margins]" Value="0,10,0,10" />
				</Actions>
			</Condition>


			<Condition Source="[Item.ItemTypeString]" ConditionOp="Equals" SourceValue="Season" ConditionLogicalOp="Or">
				<Conditions>
					<Equality Source="[Item.ItemTypeString]" ConditionOp="Equals" Value="Episode" />
				</Conditions>
				<Actions>
					<Set Target="[WatchedInfoPanel.Visible]" Value="true" />
				</Actions>
			</Condition>

			<Default Target="[WatchedInfoPanel.Visible]" Value="false" />




			<!--<Default Target="[ImageType]" Value="" />-->

			<!--<Default Target="[Main.Padding]" Value="[TmpPadding]" />
			<Default Target="[Main.Scale]" Value="[TmpScale]" />-->

		</Rules>

		<Content>
			<ColorFill Content="Transparent" Name="Main" ColorFilter="color://s:ROC_CoverDimOverlay" Alpha="0.8"
			           CenterPointPercent=".5,.5,.5">
				<Layout>
					<AnchorLayout SizeToHorizontalChildren="false" SizeToVerticalChildren="true" />
				</Layout>
				<Children>

					<ColorFill Content="Transparent" Name="WatchedInfoPanel">
						<LayoutInput>
							<AnchorLayoutInput Left="Content,0" Top="Content,0" Right="Content,1" Bottom="Content,1"
							                   ContributesToHeight="false" ContributesToWidth="false" />

						</LayoutInput>
						<Layout>
							<AnchorLayout SizeToHorizontalChildren="false" SizeToVerticalChildren="false" />
						</Layout>
						<Children>

							<tb:MediaCoverIconsOverlay Item="[Item]" Application="[Application]" Margins="2,2,2,2" />

						</Children>
						<Animations>
							<Animation Animation="animation://anim:ScrollerGlideMedium" />
						</Animations>
					</ColorFill>

					<ColorFill Content="Transparent" Name="Content" Layout="[LayoutContentVerticalFar]">
						<LayoutInput>
							<AnchorLayoutInput Right="Parent,1" Top="Parent,0" Horizontal="Far" />
						</LayoutInput>
						<!--<Layout>
							<FlowLayout Orientation="Vertical" ItemAlignment="Far" />
						</Layout>-->
						<Children>

							<art:ClearLogo Name="Logo" Item="null" AddShadow="false" AppUtil="[AppUtil]"
							               MaximumSize="250,100" Visible="false" Margins="0,5,0,5">
							</art:ClearLogo>

							<Graphic Name="OtherImage" MaintainAspectRatio="true" MaximumSize="260,230" Visible="false" />

							<Text Name="Name" Content="" Font="font://f:ROC_SubTitle" Color="color://s:ROC_Menu_Text" Visible="true" />

						</Children>
						<Animations>
							<Animation Animation="animation://anim:ScrollerGlideMedium" />
						</Animations>

					</ColorFill>

					<Graphic Name="FocusFrame" Content="null" ColorFilter="color://s:ROC_FocusFrameColor"
					         MaintainAspectRatio="false" Margins="-12,-12,-12,-12" Alpha="0.5">
						<LayoutInput>
							<AnchorLayoutInput Left="Content,0" Top="Content,0" Right="Content,1" Bottom="Content,1"
							                   ContributesToHeight="false" ContributesToWidth="false" />
						</LayoutInput>
						<Animations>
							<Animation Animation="animation://anim:ContentChangeShow.Alpha.Fast" />
						</Animations>
					</Graphic>

				</Children>

				<Animations>
					<Animation Animation="animation://anim:ScrollerGlideFast" />
					<!--<Animation Animation="animation://anim:ScrollerGlideSlow" />-->
					<Animation Animation="animation://anim:Size.Medium" />
					<Animation Animation="animation://anim:Scale.Medium" />
					<Animation Animation="animation://anim:Alpha.Medium" />
				</Animations>

			</ColorFill>

		</Content>
	</UI>


	<Animation Name="Rotate.Medium" Type="Rotate" RotationAxis="1,0,0">
		<Keyframes>
			<RotateKeyframe Time="0" RelativeTo="Current" Value="0deg;1,0,0" Interpolation="Log" />
			<RotateKeyframe Time="0.3" RelativeTo="Final" Value="0deg;1,0,0" Interpolation="Log" />
		</Keyframes>
	</Animation>

</Mcml>